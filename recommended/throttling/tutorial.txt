[Times are GMT-5]

(12:59:09) <@*lilo> channel join throttling through +J was designed to solve a problem
(12:59:18) <@*lilo> the problem is, you get kiddies joining a channel and doing channel floods
(12:59:22) <@*lilo> it's not a perfect solution
(12:59:32) <@*lilo> but it does reduce the kiddie activity when used carefully
(12:59:51) <@*lilo> first of all, many clients support it poorly at this point, so you often have to use /quote
(13:00:14) <@*lilo> the format would be /quote mode #yourchannel +J N,M
(13:00:48) <@*lilo> where N is roughly "number of seconds between joins" and M is a fudge factor
(13:01:18) <@*lilo> here's how it works, though bear in mind that the behavior has changed slighly since it started.... you should probably experiment a bit 
on a test channel to make sure you understand the boundary conditions
(13:01:40) <@*lilo> with "MODE #foo +J N,M" you start out with M people being able to join
(13:01:43) <@*lilo> really M+1
(13:01:59) <@*lilo> when that many people have joined, nobody else can join your channel; any additional people get an error
(13:02:03) <@*lilo> this is where N comes in
(13:02:20) <@*lilo> every N seconds, one more person is allowed to join, and those allowances accumulate up to M+1
(13:02:27) <@*lilo> so, for example
(13:02:34) <@*lilo> /mode #foo +J 30,3
(13:02:51) <@*lilo> 4 people could join immediately, and then in another 30 seconds, another person can join
(13:02:55) < alindeman> (some clients will require /quote mode #foo +J 30,3)
(13:03:07) <@*lilo> or 4 people could join within 30 seconds of each other, and then no more until 30 seconds after the first one joined
(13:03:17) <@*lilo> so what we have is a feature that slows down joins
(13:03:46) <@*lilo> the disadvantage is, of course, depending on how often people join your channel, some people could suddenly get that they can't join, and 
they'd have to try again
(13:04:12) <@*lilo> so even in normal operation, if 5 people start to join in our previous example, one of them is not going to make it, and will probably 
have to wait 30 seconds to try again
(13:04:40) <@*lilo> the advantage, of course, is that kiddies throw all these clients at your channel, and if they throw 100 in that 30 seconds, only 4 will 
get through
(13:04:47) <@*lilo> so you have to weigh how to do this
(13:04:52) <@*lilo> here's what I usually do
(13:05:09) <@*lilo> I will go through the channel logs, looking at how many people join in an hour at the busiest time of the day
(13:05:56) <@*lilo> (sorry, the +z is a bit distracting)
(13:06:27) <@*lilo> okay, so, I'll go through and figure out how many people join in an hour in the busiest period, and average that out as number of seconds 
per join
(13:06:49) <@*lilo> I take that number and maybe divide it by 2 and that's N
(13:07:04) <@*lilo> then I think about the possible damage in having clonebots join
(13:07:10) <@*lilo> how many clonebots can I stand?
(13:07:22) <@*lilo> if I can stand 3 of them, I'll set M to 3
(13:07:28) <@*lilo> you can also fudge around with the numbers
(13:07:39) <@*lilo> but that should give you a general idea how to use the feature
(13:07:44) <@*lilo> there are a couple of other things
(13:08:07) <@*lilo> for one thing, you don't have to just have the rejected people be rejected
(13:08:24) <@*lilo> you can use channel forwarding to forward them to another channel where the topic, and a chanserv entrymsg, explain the situation
(13:08:40) <@*lilo> we have a channel, #overflow, that does that
(13:08:44) < alindeman> ##overflow
(13:09:02) <@*lilo> we'll be changing it to ##overflow soon though
(13:09:14) <@*lilo> in keeping with the new channel naming policy
(13:09:20) <@*lilo> forwarding is a very powerful tool
(13:09:34) <@*lilo> for one thing, you can see all the bots in that overflow channel during an attack
(13:09:39) <@*lilo> well, you'll actually see most of them
(13:09:48) <@*lilo> and you have to be careful, because there are always some legitimate users caught
(13:09:53) <@*lilo> but the bigger the attack, the fewer
(13:10:06) <@*lilo> I have been asked to demonstrate throttling on this channel
(13:10:24) <@*lilo> throttling is not a good feature to use when you first create a channel that is going to get loaded down almost immediately with huge 
numbers of joins
(13:10:39) <@*lilo> you should not use it when you first create a channel, during an announcement period
(13:10:59) <@*lilo> again thing cool thing about M, the second number, is that it gives you a fudge factor
(13:11:10) <@*lilo> now, +J doesn't help much against slow attacks
(13:11:15) <@*lilo> but +m is pretty much where you are on those
(13:11:21) <@*lilo> when the attack starts, you moderate
(13:11:30) <@*lilo> I can contrast +J with +l
(13:11:43) <@*lilo> +l limits the number of people on the channel to an absolute value
(13:11:50) <@*lilo> the problem is, during an attack, it has to be constantly tweaked
(13:12:13) <@*lilo> +J will (substantially) work without tweaking, though tweaking can help sometimes during an attack situation or afterwards
(13:12:23) <@*lilo> +l does not protect you against part-join-part-join attacks
(13:12:45) <@*lilo> once the bots are there, they can start parting faster than you can change the +l value, though you can reduce it to almost nothing
(13:12:54) <@*lilo> but reducing +l to almost nothing is pretty much the same as +i
(13:12:58) <@*lilo> sometimes you have to use +i
(13:13:01) <@*lilo> sometimes you have to use +m
(13:13:15) <@*lilo> +J is just one technique in your toolkit to reduce the impact of clonebot attacks
(13:13:55) <@*lilo> again, we are here discussing +J, a channel mode for freenode's dancer-ircd which provides per-channel, tweakable join throttling
(13:14:36) <@*lilo> remember, you can use +f to send the rejected users to another channel, and since you may well catch legitimate users, this gives you a 
chance to tell them what's going on, and it also lets you survey the rejected users
(13:14:51) <@*lilo> it's good to point freenode staff to that overflow channel during an attack
(13:14:54) <@*lilo> that can help us kline the bots
(13:14:58) <@*lilo> we'll try to be careful
(13:15:15) <@*lilo> whenever you are klined or dlined as a bot, you can email staff@freenode.net and we'll be glad to get you back on the network
(13:15:30) <@*lilo> any questions+ I probably missed any you typed while the channel was +z
(13:15:34) <@*lilo> ?
(13:16:12) <@*lilo> that's pretty much the whole enchilada.... I just want to thank everybody for using freenode, and thank you for stopping by to listen to 
this mini-lecture
(13:16:34) <@*lilo> today we're having some clonebot kiddie attacks, which is not unusual on US holidays (today is the US "Independence Day")
(13:16:44) <@*lilo> so I figured it would be a good chance to let people know about +J
(13:16:55) <@*lilo> remember, you can (usually) set it and leave it, and just tweak it occasionally
(13:17:08) <@*lilo> that's part of the power of the technique
(13:17:41) <@*lilo> (I'm pretty knowledgeable about +J, btw, not because I'm the coder [asuffield did the work on it] but because I'm the specifying user for 
most freenode requirements.... I'm the head of staff of freenode)
(13:18:16) <@*lilo> ah, netsplit conditions
(13:18:19) <@*lilo> let me address that
(13:18:41) <@*lilo> the operation of +J during netsplits is not perfect... I can give you an approximate idea
(13:18:52) <@*lilo> netjoining users do tend to end up in overflow channels
(13:19:23) <@*lilo> it's not quite so bad as it looks, and it's per-local-server
(13:19:32) <@*lilo> but it's something to keep in mind
(13:21:21) <@*lilo> invite does not override +J
(13:21:31) <@*lilo> there is no good way to override +J at this time, something that needs work
(13:21:38) <@*lilo> but in an emergency it can be quite useful to have it
(13:22:06) <@*lilo> as far as netsplit performance, it's hard to distinguish well between direct joins and netsplit related joins, so that too has its 
limitations
(13:22:34) <@*lilo> but again, it's a pretty powerful and useful feature, in combination with other techniques
(13:22:52) <@*lilo> there's a transcript and alindeman will topic it
(13:23:49) <@*lilo> one user asks, in a channel under attack, throttling is pretty much continuous....is there some way to bypass it?
(13:23:59) <@*lilo> there's not really at this point....it's a common problem
(13:24:21) <@*lilo> how do you determine who has a good reputation during a reputation flood, i.e., a situation where a lot of bad actors are filling up your 
queue
(13:24:32) <@*lilo> we do intend to enhance the feature and there are ways you can help
(13:24:42) <@*lilo> the most important project right now in freenode is freenode-registry
(13:25:01) <@*lilo> if you're a python coder with a lot of time on his or her hands, please stop by #freenode-registry and we'll try to figure out how to get 
you involved :)
(13:25:22) <@*lilo> it's in the early stages, but the reputation-based stuff and the configuration logic that will replace services is going to be in
freenode-registry
(13:26:05) <@*lilo> we anticipate working on other versions than the python version, but initial work is in python
(13:26:25)  * *lilo looks for other questions
(13:28:23) <@*lilo> again, if you haven't been here during the mini-seminar, please take a look at the transcript url in the topic
(13:28:49) <@*lilo> this seminar was very ad-hoc and was driven by the fact that it's a holiday (in the US) and there's some kiddie activity today
(13:28:57) <@*lilo> so let me know how I did; messages are fine!
(13:37:08) <@*lilo> and a question was asked about channel naming, #throttling and ##throttling
(13:37:33) <@*lilo> we're going to a new channel naming and reservation policy, it's described in http://freenode.net/policy.shtml#channelnaming
(13:38:05) <@*lilo> it dovetails with freenode-registry, and with group registration, which is a manual early way to register groups in the way that
freenode-registry will promote
(13:39:19) <@*lilo> there is no time limit for the cutover to the full new channel naming policy, but it's recommend that, if you don't own your channel name 
in accordance with that policy, you prudently register the corresponding ##foo channel or consider renaming your channel to a unique name for the #foo space
(13:39:39) <@*lilo> and you can make your changeover any time; quite a few language channels have already done so
(13:42:13) <@*lilo> <$NICK> so basically for today (I like being concrete and all), your suggestion is that I should count current members and do a +J 
30,numMembers Right?
(13:42:22) <@*lilo> <lilo> not exactly
(13:42:29) <@*lilo> <lilo> you should count the average number of seconds between joins during your busiest time of day
(13:42:36) <@*lilo> <lilo> that should be the N in +J N,M
(13:42:45) <@*lilo> <lilo> and you should provide a fudge factor in case several people join faster, that's the M
(13:42:51) <@*lilo> <lilo> M == 0 means no fudge factor
(13:43:04) <@*lilo> <lilo> incrementing M lets more people join in a short time
(13:43:46) <@*lilo> (I hope that's helpful)


